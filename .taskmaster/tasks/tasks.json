{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Repository",
        "description": "Initialize the Python project using uv, configure project structure and install required dependencies.",
        "details": "- Create Git repository\n- Initialize uv with `uv init`\n- Add dependencies to pyproject.toml with `uv add`: `rich`\n- Create directory structure: tests/, docs/",
        "testStrategy": "Verify that pyproject.toml exists with correct dependencies; confirm project structure files and directories",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement Card and Deck Models",
        "description": "Create Card and Deck classes supporting two decks plus printed jokers, shuffling, drawing, and discarding.",
        "details": "- Define `Card` dataclass with suit, rank, is_joker flag\n- Define `Deck` class that on init builds 108 cards: two standard decks + 4 jokers\n- Implement `shuffle()` using `random.shuffle`\n- Implement `draw()` to pop from draw_pile; `discard(card)` to push to discard_pile\n- Maintain separate draw_pile and discard_pile lists",
        "testStrategy": "Write pytest unit tests: deck size=108, shuffle changes order, drawing reduces draw_pile and returns Card, discarding adds to discard_pile",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Card dataclass",
            "description": "Create a Python dataclass for Card with fields for suit, rank, and is_joker flag",
            "dependencies": [],
            "details": "Use `@dataclass` from Python’s `dataclasses` module. Define attributes: `suit: str`, `rank: str`, `is_joker: bool = False`. Implement a `__repr__` or `__str__` for clear debug output.",
            "status": "done",
            "testStrategy": "Instantiate cards for each suit/rank and a joker; assert attribute values and string representation."
          },
          {
            "id": 2,
            "title": "Implement Deck initialization",
            "description": "Build Deck class that initializes two standard 52-card decks plus four jokers into draw and discard piles",
            "dependencies": [
              1
            ],
            "details": "In `__init__`, import Card class. Generate suits [\"Hearts\",\"Diamonds\",\"Clubs\",\"Spades\"] and ranks [\"A\",\"2\",…\"K\"]. Loop twice to create 104 Card instances, then add 4 jokers with `is_joker=True`. Assign all to `self.draw_pile` and set `self.discard_pile=[]`.",
            "status": "done",
            "testStrategy": "After init, assert `len(draw_pile)==108`, check exactly four cards have `is_joker=True`, and discard_pile is empty."
          },
          {
            "id": 3,
            "title": "Add shuffle method",
            "description": "Implement `shuffle()` on Deck to randomize the draw pile",
            "dependencies": [
              2
            ],
            "details": "Import Python’s `random` module. In `shuffle()`, call `random.shuffle(self.draw_pile)`. Optionally accept a `seed` parameter to seed the RNG before shuffle for reproducible tests.",
            "status": "done",
            "testStrategy": "Seed RNG, call shuffle twice, assert order changes only when seed differs; verify all cards still present."
          },
          {
            "id": 4,
            "title": "Implement draw method",
            "description": "Add `draw()` method to remove and return the top card from the draw pile",
            "dependencies": [
              3
            ],
            "details": "In `draw()`, check if `self.draw_pile` is non-empty. Use `pop()` to remove the last element and return it. If empty, raise an exception or return `None` per design.",
            "status": "done",
            "testStrategy": "Draw known number of cards, assert returned cards match expected and draw_pile size decrements. Test empty pile behavior."
          },
          {
            "id": 5,
            "title": "Implement discard method",
            "description": "Add `discard(card)` to add a card to the discard pile",
            "dependencies": [
              4
            ],
            "details": "In `discard(card)`, append the passed `Card` object to `self.discard_pile`. Ensure card origin isn’t re-added to draw_pile. Optionally log or validate the card instance.",
            "status": "done",
            "testStrategy": "After drawing a card, discard it and assert `discard_pile` contains that instance and its length increments."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Player and GameState Models",
        "description": "Define Player and GameState data models to track players, hands, turn state, melds, piles, and round counters.",
        "details": "- `Player` class with name, hand:list[Card], has_declared:bool\n- `Meld` class with type (sequence/set), cards:list[Card]\n- `GameState` class with players:list[Player], draw_pile, discard_pile, melds_on_table:list[Meld], current_round:int, current_player_index:int\n- Methods to serialize/deserialize state for debugging",
        "testStrategy": "Unit tests: instantiate a GameState with 3 players, verify defaults: round=1, no melds, hands empty, piles empty",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Player Model",
            "description": "Define the Player class with fields for player name, hand of cards, and declaration status, plus methods to manage the hand and declaration.",
            "dependencies": [],
            "details": "Use a Python dataclass or class structure. Include attributes: name: str, hand: List[Card] default empty list, has_declared: bool default False. Implement methods add_card(card: Card), remove_card(card: Card) with error on missing card, and declare(): sets has_declared to True.",
            "status": "done",
            "testStrategy": "Write unit tests to add and remove cards from hand and validate exception on removing non-existent cards. Test that declare() sets has_declared to True."
          },
          {
            "id": 2,
            "title": "Implement Meld Model",
            "description": "Create the Meld class to represent a sequence or set of cards and validate meld integrity.",
            "dependencies": [],
            "details": "Use a Python dataclass with fields type: Literal['sequence','set'], cards: List[Card]. Implement a method is_valid() that checks: for 'sequence', cards form a consecutive run of same suit; for 'set', cards have identical rank but different suits.",
            "status": "done",
            "testStrategy": "Write tests for is_valid() using valid and invalid sequences and sets, asserting correct Boolean output."
          },
          {
            "id": 3,
            "title": "Implement GameState Model",
            "description": "Define the GameState class with fields to track players, draw/discard piles, melds on table, current round, and current player index.",
            "dependencies": [
              1,
              2
            ],
            "details": "Use a dataclass or class structure. Attributes: players: List[Player], draw_pile: List[Card], discard_pile: List[Card], melds_on_table: List[Meld], current_round: int default 1, current_player_index: int default 0. Implement methods next_turn() to advance current_player_index and increment current_round after a full cycle, add_player(player: Player), remove_player(player_name: str).",
            "status": "done",
            "testStrategy": "Test initial state values, next_turn() cycles through players and advances round correctly, and add/remove player updates players list appropriately."
          },
          {
            "id": 4,
            "title": "Add Serialization/Deserialization",
            "description": "Implement to_dict() and from_dict() methods for Player, Meld, and GameState to support JSON serialization and debugging.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "For each class, implement a to_dict() method that converts all attributes to JSON-serializable primitives and a @classmethod from_dict(data: dict) that reconstructs the instance. Use recursion to serialize nested objects.",
            "status": "done",
            "testStrategy": "Perform round-trip serialization tests: obj → dict → obj and assert equality of key fields for Player, Meld, and GameState instances."
          },
          {
            "id": 5,
            "title": "Write Comprehensive Unit Tests",
            "description": "Create end-to-end tests covering model initialization, methods, validation logic, and serialization workflows.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Set up a test suite using pytest or unittest. Include fixtures for Card instances. Write tests for Player methods, Meld.is_valid(), GameState methods, and serialization round trips. Ensure edge cases (empty hands, invalid melds) are covered.",
            "status": "done",
            "testStrategy": "Run test suite to verify 100% coverage of new model code, assert expected exceptions and state transitions."
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement CLI Interface Skeleton",
        "description": "Set up the basic command-line interface using Typer and Rich to handle user input and output formatting.",
        "details": "- Create `main.py` with Typer app\n- Define entry command `start`\n- Use Rich Console for styled prompts\n- Stub functions for: enter player names, show menus, display hands",
        "testStrategy": "Manual test: run `python -m src.main start`, verify prompts appear; write a smoke test script that simulates inputs via subprocess",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize main.py and project dependencies",
            "description": "Create the main.py file at the project root and install required packages (Typer and Rich). Ensure virtual environment activation.",
            "dependencies": [],
            "details": "1. Create a virtual environment (venv). 2. Install Typer and Rich via pip. 3. Create main.py in the project root with a module docstring. 4. Add a basic if __name__ == '__main__' guard.",
            "status": "done",
            "testStrategy": "Verify that running 'python main.py' with no arguments exits gracefully without errors."
          },
          {
            "id": 2,
            "title": "Set up Typer application and 'start' command",
            "description": "Initialize a Typer app instance in main.py and define the entrypoint command named 'start'.",
            "dependencies": [
              1
            ],
            "details": "1. Import Typer in main.py. 2. Create app = Typer(). 3. Add @app.command(name='start') decorator to a function start(). 4. Inside start(), add a placeholder print or pass.",
            "status": "done",
            "testStrategy": "Run 'python main.py start --help' and confirm Typer displays the command description and usage."
          },
          {
            "id": 3,
            "title": "Integrate Rich console for styled I/O",
            "description": "Set up Rich Console in main.py to handle styled output and prompts throughout the CLI.",
            "dependencies": [
              2
            ],
            "details": "1. Import Console from rich.console. 2. Instantiate console = Console() at module level. 3. In the start() function, replace basic print statements with console.print(). 4. Ensure console.prompt() is available for future inputs.",
            "status": "done",
            "testStrategy": "Within start(), use console.print('[bold green]Test Message[/]') and confirm styled output appears when running 'python main.py start'."
          },
          {
            "id": 4,
            "title": "Implement stub for entering player names",
            "description": "Create a function stub to prompt and collect player names using Rich console.prompt.",
            "dependencies": [
              3
            ],
            "details": "1. Define function enter_player_names() in main.py or a submodule. 2. Use console.prompt('Enter player 1 name') and console.prompt('Enter player 2 name'). 3. Return the collected names as a tuple or list. 4. Call this stub from within start() for now.",
            "status": "done",
            "testStrategy": "Write a simple pytest that mocks console.prompt to return sample names and assert enter_player_names() returns the expected list."
          },
          {
            "id": 5,
            "title": "Add stubs for showing menus and displaying hands",
            "description": "Create stub functions for show_menu() and display_hand() that use Rich to format menus and card hands.",
            "dependencies": [
              4
            ],
            "details": "1. Define function show_menu(options: List[str]) that prints a numbered list using console.print(). 2. Define display_hand(player: str, cards: List[str]) that uses console.print with table or styled text. 3. Call these stubs from start() after name entry.",
            "status": "done",
            "testStrategy": "Mock options and cards lists in unit tests to ensure show_menu() and display_hand() run without errors and produce output to console (capture output)."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Game Setup Logic",
        "description": "Build the flow to start game: prompt for player count and names, shuffle deck, deal cards, initialize piles and starting player.",
        "details": "- In CLI handler: ask for 2–6 players, collect names\n- Initialize Deck, call shuffle()\n- Deal 13 cards to each Player.hand\n- Move remaining to GameState.draw_pile, flip top card to discard_pile\n- Randomly select starting player index\n- Set GameState.current_round=1",
        "testStrategy": "Simulate a game setup: verify each player has 13 cards, draw_pile size=108-13*players-1, discard_pile size=1, starting player index in range",
        "priority": "high",
        "dependencies": [
          2,
          3,
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Prompt for Player Count",
            "description": "Display a prompt to the user or UI to select the number of players for the game",
            "dependencies": [],
            "details": "Implement an input dialog or form field to collect player count; validate that the count falls within allowed range (e.g., 2–6)",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Collect Player Names",
            "description": "Prompt for and store each player’s name based on the selected player count",
            "dependencies": [
              1
            ],
            "details": "Iterate from 1 to playerCount, display input fields or prompts for each player’s name, trim and store the names in an array",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Initialize and Shuffle Deck",
            "description": "Create a full deck of cards and randomize their order",
            "dependencies": [
              2
            ],
            "details": "Build an array of card objects representing the full deck, then apply a Fisher-Yates or similar shuffle algorithm to randomize the array in place",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Deal Cards to Players",
            "description": "Distribute the starting hand of cards to each player",
            "dependencies": [
              3
            ],
            "details": "Loop through each player and deal a fixed number of cards (e.g., 7) by removing cards from the top of the shuffled deck and assigning them to each player’s hand array",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Set Up Draw and Discard Piles",
            "description": "Initialize the draw pile with remaining cards and place the first card into the discard pile",
            "dependencies": [
              4
            ],
            "details": "Assign the leftover cards from the deck to the draw pile; remove the top card from the draw pile and place it into a new discard pile array",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Select Starting Player",
            "description": "Randomly choose which player goes first",
            "dependencies": [
              5
            ],
            "details": "Generate a random index within the range of player names array and mark that player as the starting player in game state",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Turn and Round Management",
        "description": "Create the main game loop enforcing draw, review, and discard phases; track rounds and prevent declarations in rounds 1–3.",
        "details": "- In GameState, method `play_turn()` executing:\n  - draw phase: call Deck.draw or pick from discard_pile (logic stubbed later)\n  - display hand via Rich\n  - record discard: method Deck.discard\n- After each player, increment current_player_index, if index==0 then increment current_round\n- Enforce: if current_round<4, disable declaration/extension actions in menu",
        "testStrategy": "Unit test: simulate 4 players for 3 full rounds, ensure no declaration menu option appears; check round counter increments correctly",
        "priority": "high",
        "dependencies": [
          5,
          4
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Main Game Loop Structure",
            "description": "Implement the core loop that drives turn and round progression",
            "dependencies": [],
            "details": "Set up a continuous loop that cycles through player turns and rounds, checks exit conditions, and transitions between game phases.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Draw Phase Logic",
            "description": "Handle card or resource drawing at the start of each turn",
            "dependencies": [
              1
            ],
            "details": "Implement drawing rules, replenish player hand or pool, enforce maximum hand size, and trigger any associated events.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Display and Discard Phase",
            "description": "Present drawn items and process discards",
            "dependencies": [
              2
            ],
            "details": "Show newly drawn cards/resources to the player, allow selection of discards if over limit, update game state and player inventory accordingly.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Round-Counter Increment Logic",
            "description": "Advance the round count at the end of each full cycle",
            "dependencies": [
              3
            ],
            "details": "Detect completion of the final player turn in a round, increment a round counter, reset turn index, and log round transitions.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Menu Option Gating for Early Rounds",
            "description": "Restrict certain actions or menu choices during initial rounds",
            "dependencies": [
              4
            ],
            "details": "Define round-based conditions for enabling/disabling menu options, check current round before rendering menus, and enforce gating rules.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Initial Declaration Validation",
        "description": "Enable and enforce initial declaration rules from round 4: validate 48-point minimum and at least one pure sequence.",
        "details": "- Write Validator class with `validate_initial_declaration(player_hand, melds)->bool`\n- Compute points: use mapping for face cards and jokers\n- Detect pure sequences: sort suit groups and check consecutive runs without jokers\n- On passing, set player.has_declared=True, remove meld cards from hand, add to GameState.melds_on_table",
        "testStrategy": "Unit tests covering: valid melds summing >=48 with pure sequence, invalid sums, missing pure sequence, jokers misuse",
        "priority": "high",
        "dependencies": [
          6,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Meld and Extension Logic",
        "description": "Allow declared players to make additional melds and extend any table melds according to rules.",
        "details": "- Extend Validator with `validate_meld(meld)` and `validate_extension(existing_meld, added_cards)`\n- For sequences: ensure added card continues suit sequence, no wrap over Ace\n- For sets: ensure rank match, no more than 4, distinct suits\n- CLI menu for declare/extend when allowed",
        "testStrategy": "Unit tests: extension of sequence at both ends, rejection of wrap-around, set expansion to 4, rejection beyond 4",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Game Closure and Scoring",
        "description": "Enable a player to close the game when finishing melds and calculate final scores.",
        "details": "- In turn logic: detect if player's hand empty after meld/discard => close\n- On close: iterate players; for non-closer, if has_declared False => score=100+50*jokers; else sum card values\n- Jokers in meld value as substituted rank for scoring pool-hand scenario\n- Display scoreboard via Rich",
        "testStrategy": "Integration test: simulate end-of-game scenarios: declarer closes, others various states, verify scores match PRD",
        "priority": "high",
        "dependencies": [
          8,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Write Automated Test Suite",
        "description": "Set up pytest suite covering unit and integration tests for all components.",
        "details": "- Create tests/ directory with modules:\n  - test_card_deck.py\n  - test_player_gamestate.py\n  - test_validator.py\n  - test_gameplay_flow.py\n- Use fixtures for game setups\n- Include CI config to run tests automatically",
        "testStrategy": "Ensure pytest passes 100% on all tests, increase coverage to >=90%; run tests locally via `pytest`",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-02T20:09:01.070Z",
      "updated": "2025-07-03T15:27:42.170Z",
      "description": "Tasks for master context"
    }
  }
}